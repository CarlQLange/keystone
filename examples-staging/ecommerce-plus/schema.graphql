# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserAddress(data: UserAddressCreateInput!): UserAddress
  createUserAddresses(data: [UserAddressCreateInput!]!): [UserAddress]
  updateUserAddress(
    where: UserAddressWhereUniqueInput!
    data: UserAddressUpdateInput!
  ): UserAddress
  updateUserAddresses(data: [UserAddressUpdateArgs!]!): [UserAddress]
  deleteUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  deleteUserAddresses(where: [UserAddressWhereUniqueInput!]!): [UserAddress]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(
    where: OrderItemWhereUniqueInput!
    data: OrderItemUpdateInput!
  ): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createOrderNote(data: OrderNoteCreateInput!): OrderNote
  createOrderNotes(data: [OrderNoteCreateInput!]!): [OrderNote]
  updateOrderNote(
    where: OrderNoteWhereUniqueInput!
    data: OrderNoteUpdateInput!
  ): OrderNote
  updateOrderNotes(data: [OrderNoteUpdateArgs!]!): [OrderNote]
  deleteOrderNote(where: OrderNoteWhereUniqueInput!): OrderNote
  deleteOrderNotes(where: [OrderNoteWhereUniqueInput!]!): [OrderNote]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductBundle(data: ProductBundleCreateInput!): ProductBundle
  createProductBundles(data: [ProductBundleCreateInput!]!): [ProductBundle]
  updateProductBundle(
    where: ProductBundleWhereUniqueInput!
    data: ProductBundleUpdateInput!
  ): ProductBundle
  updateProductBundles(data: [ProductBundleUpdateArgs!]!): [ProductBundle]
  deleteProductBundle(where: ProductBundleWhereUniqueInput!): ProductBundle
  deleteProductBundles(
    where: [ProductBundleWhereUniqueInput!]!
  ): [ProductBundle]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createShippingZone(data: ShippingZoneCreateInput!): ShippingZone
  createShippingZones(data: [ShippingZoneCreateInput!]!): [ShippingZone]
  updateShippingZone(
    where: ShippingZoneWhereUniqueInput!
    data: ShippingZoneUpdateInput!
  ): ShippingZone
  updateShippingZones(data: [ShippingZoneUpdateArgs!]!): [ShippingZone]
  deleteShippingZone(where: ShippingZoneWhereUniqueInput!): ShippingZone
  deleteShippingZones(where: [ShippingZoneWhereUniqueInput!]!): [ShippingZone]
  createShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod
  createShippingMethods(data: [ShippingMethodCreateInput!]!): [ShippingMethod]
  updateShippingMethod(
    where: ShippingMethodWhereUniqueInput!
    data: ShippingMethodUpdateInput!
  ): ShippingMethod
  updateShippingMethods(data: [ShippingMethodUpdateArgs!]!): [ShippingMethod]
  deleteShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteShippingMethods(
    where: [ShippingMethodWhereUniqueInput!]!
  ): [ShippingMethod]
  endSession: Boolean!
}

union AuthenticatedItem = User

type Query {
  authenticatedItem: AuthenticatedItem
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userAddresses(
    where: UserAddressWhereInput! = {}
    orderBy: [UserAddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserAddress!]
  userAddress(where: UserAddressWhereUniqueInput!): UserAddress
  userAddressesCount(where: UserAddressWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  orderItems(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  orderNotes(
    where: OrderNoteWhereInput! = {}
    orderBy: [OrderNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderNote!]
  orderNote(where: OrderNoteWhereUniqueInput!): OrderNote
  orderNotesCount(where: OrderNoteWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productBundles(
    where: ProductBundleWhereInput! = {}
    orderBy: [ProductBundleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductBundle!]
  productBundle(where: ProductBundleWhereUniqueInput!): ProductBundle
  productBundlesCount(where: ProductBundleWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  shippingZones(
    where: ShippingZoneWhereInput! = {}
    orderBy: [ShippingZoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingZone!]
  shippingZone(where: ShippingZoneWhereUniqueInput!): ShippingZone
  shippingZonesCount(where: ShippingZoneWhereInput! = {}): Int
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Category {
  id: ID!
  title: String
  summary: String
  image: Image
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  parent: Category
  bundles(
    where: ProductBundleWhereInput! = {}
    orderBy: [ProductBundleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductBundle!]
  bundlesCount(where: ProductBundleWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  summary: StringFilter
  image: ImageWhereInput
  products: ProductManyRelationFilter
  posts: PostManyRelationFilter
  parent: CategoryWhereInput
  bundles: ProductBundleManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ProductBundleManyRelationFilter {
  every: ProductBundleWhereInput
  some: ProductBundleWhereInput
  none: ProductBundleWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  summary: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CategoryUpdateInput {
  title: String
  summary: String
  image: ImageRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  parent: CategoryRelateToOneForUpdateInput
  bundles: ProductBundleRelateToManyForUpdateInput
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductBundleRelateToManyForUpdateInput {
  disconnect: [ProductBundleWhereUniqueInput!]
  set: [ProductBundleWhereUniqueInput!]
  create: [ProductBundleCreateInput!]
  connect: [ProductBundleWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  title: String
  summary: String
  image: ImageRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  parent: CategoryRelateToOneForCreateInput
  bundles: ProductBundleRelateToManyForCreateInput
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ProductBundleRelateToManyForCreateInput {
  create: [ProductBundleCreateInput!]
  connect: [ProductBundleWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  shippingAddress: UserAddress
  billingAddress: UserAddress
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  orders: Order
  orderNotes(
    where: OrderNoteWhereInput! = {}
    orderBy: [OrderNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderNote!]
  orderNotesCount(where: OrderNoteWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  avatar: ImageFieldOutput
}

type PasswordState {
  isSet: Boolean!
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
  shippingAddress: UserAddressWhereInput
  billingAddress: UserAddressWhereInput
  pages: PageManyRelationFilter
  posts: PostManyRelationFilter
  orders: OrderWhereInput
  orderNotes: OrderNoteManyRelationFilter
  reviews: ReviewManyRelationFilter
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input OrderNoteManyRelationFilter {
  every: OrderNoteWhereInput
  some: OrderNoteWhereInput
  none: OrderNoteWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  shippingAddress: UserAddressRelateToOneForUpdateInput
  billingAddress: UserAddressRelateToOneForUpdateInput
  pages: PageRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  orders: OrderRelateToOneForUpdateInput
  orderNotes: OrderNoteRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  avatar: ImageFieldInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserAddressRelateToOneForUpdateInput {
  create: UserAddressCreateInput
  connect: UserAddressWhereUniqueInput
  disconnect: Boolean
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderNoteRelateToManyForUpdateInput {
  disconnect: [OrderNoteWhereUniqueInput!]
  set: [OrderNoteWhereUniqueInput!]
  create: [OrderNoteCreateInput!]
  connect: [OrderNoteWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  shippingAddress: UserAddressRelateToOneForCreateInput
  billingAddress: UserAddressRelateToOneForCreateInput
  pages: PageRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  orders: OrderRelateToOneForCreateInput
  orderNotes: OrderNoteRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  avatar: ImageFieldInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input UserAddressRelateToOneForCreateInput {
  create: UserAddressCreateInput
  connect: UserAddressWhereUniqueInput
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

input OrderNoteRelateToManyForCreateInput {
  create: [OrderNoteCreateInput!]
  connect: [OrderNoteWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

type UserAddress {
  id: ID!
  unitNumber: String
  streetNumber: String
  suburb: String
  postcode: String
  state: String
  country: String
}

input UserAddressWhereUniqueInput {
  id: ID
}

input UserAddressWhereInput {
  AND: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  id: IDFilter
  unitNumber: StringFilter
  streetNumber: StringFilter
  suburb: StringFilter
  postcode: StringFilter
  state: StringNullableFilter
  country: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserAddressOrderByInput {
  id: OrderDirection
  unitNumber: OrderDirection
  streetNumber: OrderDirection
  suburb: OrderDirection
  postcode: OrderDirection
  state: OrderDirection
  country: OrderDirection
}

input UserAddressUpdateInput {
  unitNumber: String
  streetNumber: String
  suburb: String
  postcode: String
  state: String
  country: String
}

input UserAddressUpdateArgs {
  where: UserAddressWhereUniqueInput!
  data: UserAddressUpdateInput!
}

input UserAddressCreateInput {
  unitNumber: String
  streetNumber: String
  suburb: String
  postcode: String
  state: String
  country: String
}

type Order {
  id: ID!
  total: Float
  customer: User
  items(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  notes(
    where: OrderNoteWhereInput! = {}
    orderBy: [OrderNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderNote!]
  notesCount(where: OrderNoteWhereInput! = {}): Int
  trackingNumber: String
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  total: FloatNullableFilter
  customer: UserWhereInput
  items: OrderItemManyRelationFilter
  notes: OrderNoteManyRelationFilter
  trackingNumber: StringFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  total: OrderDirection
  trackingNumber: OrderDirection
}

input OrderUpdateInput {
  total: Float
  customer: UserRelateToOneForUpdateInput
  items: OrderItemRelateToManyForUpdateInput
  notes: OrderNoteRelateToManyForUpdateInput
  trackingNumber: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  total: Float
  customer: UserRelateToOneForCreateInput
  items: OrderItemRelateToManyForCreateInput
  notes: OrderNoteRelateToManyForCreateInput
  trackingNumber: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type OrderItem {
  id: ID!
  name: String
  description: String
  price: Float
  quantity: Int
  order: Order
  photo: Image
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: FloatNullableFilter
  quantity: IntNullableFilter
  order: OrderWhereInput
  photo: ImageWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
}

input OrderItemUpdateInput {
  name: String
  description: String
  price: Float
  quantity: Int
  order: OrderRelateToOneForUpdateInput
  photo: ImageRelateToOneForUpdateInput
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  name: String
  description: String
  price: Float
  quantity: Int
  order: OrderRelateToOneForCreateInput
  photo: ImageRelateToOneForCreateInput
}

type OrderNote {
  id: ID!
  title: String
  note: String
  author: User
  order: Order
}

input OrderNoteWhereUniqueInput {
  id: ID
}

input OrderNoteWhereInput {
  AND: [OrderNoteWhereInput!]
  OR: [OrderNoteWhereInput!]
  NOT: [OrderNoteWhereInput!]
  id: IDFilter
  title: StringFilter
  note: StringFilter
  author: UserWhereInput
  order: OrderWhereInput
}

input OrderNoteOrderByInput {
  id: OrderDirection
  title: OrderDirection
  note: OrderDirection
}

input OrderNoteUpdateInput {
  title: String
  note: String
  author: UserRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
}

input OrderNoteUpdateArgs {
  where: OrderNoteWhereUniqueInput!
  data: OrderNoteUpdateInput!
}

input OrderNoteCreateInput {
  title: String
  note: String
  author: UserRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
}

type Role {
  id: ID!
  name: String
  canManageOwnPosts: Boolean
  canManagePosts: Boolean
  canManageOwnProducts: Boolean
  canManageProducts: Boolean
  canManageOrders: Boolean
  canManageRoles: Boolean
  canManageUsers: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageOwnPosts: BooleanFilter
  canManagePosts: BooleanFilter
  canManageOwnProducts: BooleanFilter
  canManageProducts: BooleanFilter
  canManageOrders: BooleanFilter
  canManageRoles: BooleanFilter
  canManageUsers: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageOwnPosts: OrderDirection
  canManagePosts: OrderDirection
  canManageOwnProducts: OrderDirection
  canManageProducts: OrderDirection
  canManageOrders: OrderDirection
  canManageRoles: OrderDirection
  canManageUsers: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageOwnPosts: Boolean
  canManagePosts: Boolean
  canManageOwnProducts: Boolean
  canManageProducts: Boolean
  canManageOrders: Boolean
  canManageRoles: Boolean
  canManageUsers: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageOwnPosts: Boolean
  canManagePosts: Boolean
  canManageOwnProducts: Boolean
  canManageProducts: Boolean
  canManageOrders: Boolean
  canManageRoles: Boolean
  canManageUsers: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Image {
  id: ID!
  image: ImageFieldOutput
  title: String
  description: String
  altText: String
}

input ImageWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  image: ImageFieldInput
  title: String
  description: String
  altText: String
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: ImageFieldInput
  title: String
  description: String
  altText: String
}

type Post {
  id: ID!
  title: String
  summary: String
  featureImage: Image
  metaTitle: String
  metaDescription: String
  metaImage: Image
  content: Post_content_Document
  author: User
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  status: String
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  summary: StringFilter
  featureImage: ImageWhereInput
  metaTitle: StringFilter
  metaDescription: StringFilter
  metaImage: ImageWhereInput
  author: UserWhereInput
  category: CategoryManyRelationFilter
  status: StringNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  summary: OrderDirection
  metaTitle: OrderDirection
  metaDescription: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  summary: String
  featureImage: ImageRelateToOneForUpdateInput
  metaTitle: String
  metaDescription: String
  metaImage: ImageRelateToOneForUpdateInput
  content: JSON
  author: UserRelateToOneForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  status: String
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  summary: String
  featureImage: ImageRelateToOneForCreateInput
  metaTitle: String
  metaDescription: String
  metaImage: ImageRelateToOneForCreateInput
  content: JSON
  author: UserRelateToOneForCreateInput
  category: CategoryRelateToManyForCreateInput
  status: String
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Page {
  id: ID!
  title: String
  featureImage: Image
  metaTitle: String
  metaDescription: String
  metaImage: Image
  content: Page_content_Document
  author: User
  status: String
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  featureImage: ImageWhereInput
  metaTitle: StringFilter
  metaDescription: StringFilter
  metaImage: ImageWhereInput
  author: UserWhereInput
  status: StringNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  metaTitle: OrderDirection
  metaDescription: OrderDirection
  status: OrderDirection
}

input PageUpdateInput {
  title: String
  featureImage: ImageRelateToOneForUpdateInput
  metaTitle: String
  metaDescription: String
  metaImage: ImageRelateToOneForUpdateInput
  content: JSON
  author: UserRelateToOneForUpdateInput
  status: String
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  featureImage: ImageRelateToOneForCreateInput
  metaTitle: String
  metaDescription: String
  metaImage: ImageRelateToOneForCreateInput
  content: JSON
  author: UserRelateToOneForCreateInput
  status: String
}

type Product {
  id: ID!
  name: String
  status: String
  price: Float
  stock: Int
  discount: Float
  description: String
  featureImage: Image
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  shippingZones(
    where: ShippingZoneWhereInput! = {}
    orderBy: [ShippingZoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingZone!]
  shippingZonesCount(where: ShippingZoneWhereInput! = {}): Int
  metaDescription: String
  metaImage: Image
  metaTitle: String
  variants: ProductVariant
  relatedProducts(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  relatedProductsCount(where: ProductWhereInput! = {}): Int
  canonicalCategory: Category
  type: String
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  price: FloatFilter
  stock: IntFilter
  discount: FloatNullableFilter
  description: StringFilter
  featureImage: ImageWhereInput
  category: CategoryManyRelationFilter
  shippingZones: ShippingZoneManyRelationFilter
  metaDescription: StringFilter
  metaImage: ImageWhereInput
  metaTitle: StringFilter
  variants: ProductVariantWhereInput
  relatedProducts: ProductManyRelationFilter
  canonicalCategory: CategoryWhereInput
  type: StringNullableFilter
  reviews: ReviewManyRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ShippingZoneManyRelationFilter {
  every: ShippingZoneWhereInput
  some: ShippingZoneWhereInput
  none: ShippingZoneWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  price: OrderDirection
  stock: OrderDirection
  discount: OrderDirection
  description: OrderDirection
  metaDescription: OrderDirection
  metaTitle: OrderDirection
  type: OrderDirection
}

input ProductUpdateInput {
  name: String
  status: String
  price: Float
  stock: Int
  discount: Float
  description: String
  featureImage: ImageRelateToOneForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  shippingZones: ShippingZoneRelateToManyForUpdateInput
  metaDescription: String
  metaImage: ImageRelateToOneForUpdateInput
  metaTitle: String
  variants: ProductVariantRelateToOneForUpdateInput
  relatedProducts: ProductRelateToManyForUpdateInput
  canonicalCategory: CategoryRelateToOneForUpdateInput
  type: String
  reviews: ReviewRelateToManyForUpdateInput
}

input ShippingZoneRelateToManyForUpdateInput {
  disconnect: [ShippingZoneWhereUniqueInput!]
  set: [ShippingZoneWhereUniqueInput!]
  create: [ShippingZoneCreateInput!]
  connect: [ShippingZoneWhereUniqueInput!]
}

input ProductVariantRelateToOneForUpdateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  status: String
  price: Float
  stock: Int
  discount: Float
  description: String
  featureImage: ImageRelateToOneForCreateInput
  category: CategoryRelateToManyForCreateInput
  shippingZones: ShippingZoneRelateToManyForCreateInput
  metaDescription: String
  metaImage: ImageRelateToOneForCreateInput
  metaTitle: String
  variants: ProductVariantRelateToOneForCreateInput
  relatedProducts: ProductRelateToManyForCreateInput
  canonicalCategory: CategoryRelateToOneForCreateInput
  type: String
  reviews: ReviewRelateToManyForCreateInput
}

input ShippingZoneRelateToManyForCreateInput {
  create: [ShippingZoneCreateInput!]
  connect: [ShippingZoneWhereUniqueInput!]
}

input ProductVariantRelateToOneForCreateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

type ProductBundle {
  id: ID!
  price: Float
  status: String
  name: String
  description: String
  featureImage: Image
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  metaDescription: String
  metaImage: Image
  metaTitle: String
  sku: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input ProductBundleWhereUniqueInput {
  id: ID
}

input ProductBundleWhereInput {
  AND: [ProductBundleWhereInput!]
  OR: [ProductBundleWhereInput!]
  NOT: [ProductBundleWhereInput!]
  id: IDFilter
  price: FloatNullableFilter
  status: StringNullableFilter
  name: StringFilter
  description: StringFilter
  featureImage: ImageWhereInput
  category: CategoryManyRelationFilter
  metaDescription: StringFilter
  metaImage: ImageWhereInput
  metaTitle: StringFilter
  sku: StringFilter
  products: ProductManyRelationFilter
}

input ProductBundleOrderByInput {
  id: OrderDirection
  price: OrderDirection
  status: OrderDirection
  name: OrderDirection
  description: OrderDirection
  metaDescription: OrderDirection
  metaTitle: OrderDirection
  sku: OrderDirection
}

input ProductBundleUpdateInput {
  price: Float
  status: String
  name: String
  description: String
  featureImage: ImageRelateToOneForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  metaDescription: String
  metaImage: ImageRelateToOneForUpdateInput
  metaTitle: String
  sku: String
  products: ProductRelateToManyForUpdateInput
}

input ProductBundleUpdateArgs {
  where: ProductBundleWhereUniqueInput!
  data: ProductBundleUpdateInput!
}

input ProductBundleCreateInput {
  price: Float
  status: String
  name: String
  description: String
  featureImage: ImageRelateToOneForCreateInput
  category: CategoryRelateToManyForCreateInput
  metaDescription: String
  metaImage: ImageRelateToOneForCreateInput
  metaTitle: String
  sku: String
  products: ProductRelateToManyForCreateInput
}

type ProductVariant {
  id: ID!
  name: String
  description: String
  photos(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  photosCount(where: ImageWhereInput! = {}): Int
  stock: Int
  product: Product
  length: String
  width: String
  depth: String
  weight: String
  downloadLink: String
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  photos: ImageManyRelationFilter
  stock: IntNullableFilter
  product: ProductWhereInput
  length: StringFilter
  width: StringFilter
  depth: StringFilter
  weight: StringFilter
  downloadLink: StringFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ProductVariantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  stock: OrderDirection
  length: OrderDirection
  width: OrderDirection
  depth: OrderDirection
  weight: OrderDirection
  downloadLink: OrderDirection
}

input ProductVariantUpdateInput {
  name: String
  description: String
  photos: ImageRelateToManyForUpdateInput
  stock: Int
  product: ProductRelateToOneForUpdateInput
  length: String
  width: String
  depth: String
  weight: String
  downloadLink: String
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  name: String
  description: String
  photos: ImageRelateToManyForCreateInput
  stock: Int
  product: ProductRelateToOneForCreateInput
  length: String
  width: String
  depth: String
  weight: String
  downloadLink: String
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Review {
  id: ID!
  title: String
  rating: String
  content: Review_content_Document
  reviewer: User
  product: Product
}

type Review_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  title: StringFilter
  rating: StringNullableFilter
  reviewer: UserWhereInput
  product: ProductWhereInput
}

input ReviewOrderByInput {
  id: OrderDirection
  title: OrderDirection
  rating: OrderDirection
}

input ReviewUpdateInput {
  title: String
  rating: String
  content: JSON
  reviewer: UserRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  title: String
  rating: String
  content: JSON
  reviewer: UserRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
}

type CartItem {
  id: ID!
  quantity: Int
  productVariant: ProductVariant
  customer: User
  price: Float
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: IntNullableFilter
  productVariant: ProductVariantWhereInput
  customer: UserWhereInput
  price: FloatNullableFilter
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  productVariant: ProductVariantRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  price: Float
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  productVariant: ProductVariantRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  price: Float
}

type ShippingZone {
  id: ID!
  title: String
  region: String
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input ShippingZoneWhereUniqueInput {
  id: ID
}

input ShippingZoneWhereInput {
  AND: [ShippingZoneWhereInput!]
  OR: [ShippingZoneWhereInput!]
  NOT: [ShippingZoneWhereInput!]
  id: IDFilter
  title: StringFilter
  region: StringNullableFilter
  shippingMethods: ShippingMethodManyRelationFilter
  products: ProductManyRelationFilter
}

input ShippingMethodManyRelationFilter {
  every: ShippingMethodWhereInput
  some: ShippingMethodWhereInput
  none: ShippingMethodWhereInput
}

input ShippingZoneOrderByInput {
  id: OrderDirection
  title: OrderDirection
  region: OrderDirection
}

input ShippingZoneUpdateInput {
  title: String
  region: String
  shippingMethods: ShippingMethodRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
}

input ShippingMethodRelateToManyForUpdateInput {
  disconnect: [ShippingMethodWhereUniqueInput!]
  set: [ShippingMethodWhereUniqueInput!]
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

input ShippingZoneUpdateArgs {
  where: ShippingZoneWhereUniqueInput!
  data: ShippingZoneUpdateInput!
}

input ShippingZoneCreateInput {
  title: String
  region: String
  shippingMethods: ShippingMethodRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
}

input ShippingMethodRelateToManyForCreateInput {
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

type ShippingMethod {
  id: ID!
  title: String
  enabled: Boolean
  shippingZones(
    where: ShippingZoneWhereInput! = {}
    orderBy: [ShippingZoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingZone!]
  shippingZonesCount(where: ShippingZoneWhereInput! = {}): Int
  APIKey: String
}

input ShippingMethodWhereUniqueInput {
  id: ID
  APIKey: String
}

input ShippingMethodWhereInput {
  AND: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
  id: IDFilter
  title: StringFilter
  enabled: BooleanFilter
  shippingZones: ShippingZoneManyRelationFilter
  APIKey: StringFilter
}

input ShippingMethodOrderByInput {
  id: OrderDirection
  title: OrderDirection
  enabled: OrderDirection
  APIKey: OrderDirection
}

input ShippingMethodUpdateInput {
  title: String
  enabled: Boolean
  shippingZones: ShippingZoneRelateToManyForUpdateInput
  APIKey: String
}

input ShippingMethodUpdateArgs {
  where: ShippingMethodWhereUniqueInput!
  data: ShippingMethodUpdateInput!
}

input ShippingMethodCreateInput {
  title: String
  enabled: Boolean
  shippingZones: ShippingZoneRelateToManyForCreateInput
  APIKey: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
