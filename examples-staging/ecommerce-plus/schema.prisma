// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model Category {
  id                             String          @id @default(cuid())
  title                          String          @default("")
  summary                        String          @default("")
  image                          Image?          @relation("Category_image", fields: [imageId], references: [id])
  imageId                        String?         @map("image")
  products                       Product[]       @relation("Category_products_Product_category")
  posts                          Post[]          @relation("Category_posts_Post_category")
  parent                         Category?       @relation("Category_parent", fields: [parentId], references: [id])
  parentId                       String?         @map("parent")
  bundles                        ProductBundle[] @relation("Category_bundles_ProductBundle_category")
  from_Category_parent           Category[]      @relation("Category_parent")
  from_Product_canonicalCategory Product[]       @relation("Product_canonicalCategory")

  @@index([imageId])
  @@index([parentId])
}

model User {
  id                     String       @id @default(cuid())
  name                   String       @default("")
  email                  String       @unique @default("")
  password               String?
  role                   Role?        @relation("User_role", fields: [roleId], references: [id])
  roleId                 String?      @map("role")
  shippingAddress        UserAddress? @relation("User_shippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId      String?      @map("shippingAddress")
  billingAddress         UserAddress? @relation("User_billingAddress", fields: [billingAddressId], references: [id])
  billingAddressId       String?      @map("billingAddress")
  pages                  Page[]       @relation("Page_author")
  posts                  Post[]       @relation("Post_author")
  orders                 Order?       @relation("Order_customer")
  orderNotes             OrderNote[]  @relation("OrderNote_author")
  reviews                Review[]     @relation("Review_reviewer")
  avatar_filesize        Int?
  avatar_extension       String?
  avatar_width           Int?
  avatar_height          Int?
  avatar_mode            String?
  avatar_id              String?
  from_CartItem_customer CartItem[]   @relation("CartItem_customer")

  @@index([roleId])
  @@index([shippingAddressId])
  @@index([billingAddressId])
}

model UserAddress {
  id                        String  @id @default(cuid())
  unitNumber                String  @default("")
  streetNumber              String  @default("")
  suburb                    String  @default("")
  postcode                  String  @default("")
  state                     String?
  country                   String?
  from_User_shippingAddress User[]  @relation("User_shippingAddress")
  from_User_billingAddress  User[]  @relation("User_billingAddress")
}

model Order {
  id             String      @id @default(cuid())
  total          Float?
  customer       User?       @relation("Order_customer", fields: [customerId], references: [id])
  customerId     String?     @unique @map("customer")
  items          OrderItem[] @relation("OrderItem_order")
  notes          OrderNote[] @relation("OrderNote_order")
  trackingNumber String      @default("")
}

model OrderItem {
  id          String  @id @default(cuid())
  name        String  @default("")
  description String  @default("")
  price       Float?
  quantity    Int?
  order       Order?  @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String? @map("order")
  photo       Image?  @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     String? @map("photo")

  @@index([orderId])
  @@index([photoId])
}

model OrderNote {
  id       String  @id @default(cuid())
  title    String  @default("")
  note     String  @default("")
  author   User?   @relation("OrderNote_author", fields: [authorId], references: [id])
  authorId String? @map("author")
  order    Order?  @relation("OrderNote_order", fields: [orderId], references: [id])
  orderId  String? @map("order")

  @@index([authorId])
  @@index([orderId])
}

model Role {
  id                   String  @id @default(cuid())
  name                 String  @default("")
  assignedTo           User[]  @relation("User_role")
  canManageOwnPosts    Boolean @default(false)
  canManagePosts       Boolean @default(false)
  canManageOwnProducts Boolean @default(false)
  canManageProducts    Boolean @default(false)
  canManageOwnOrders   Boolean @default(false)
  canManageOrders      Boolean @default(false)
  canManageRoles       Boolean @default(false)
  canManageUsers       Boolean @default(false)
}

model Image {
  id                              String           @id @default(cuid())
  image_filesize                  Int?
  image_extension                 String?
  image_width                     Int?
  image_height                    Int?
  image_mode                      String?
  image_id                        String?
  title                           String           @default("")
  description                     String           @default("")
  altText                         String           @default("")
  from_Category_image             Category[]       @relation("Category_image")
  from_OrderItem_photo            OrderItem[]      @relation("OrderItem_photo")
  from_Post_featureImage          Post[]           @relation("Post_featureImage")
  from_Post_metaImage             Post[]           @relation("Post_metaImage")
  from_Page_featureImage          Page[]           @relation("Page_featureImage")
  from_Page_metaImage             Page[]           @relation("Page_metaImage")
  from_Product_featureImage       Product[]        @relation("Product_featureImage")
  from_Product_metaImage          Product[]        @relation("Product_metaImage")
  from_ProductBundle_featureImage ProductBundle[]  @relation("ProductBundle_featureImage")
  from_ProductBundle_metaImage    ProductBundle[]  @relation("ProductBundle_metaImage")
  from_ProductVariant_photos      ProductVariant[] @relation("ProductVariant_photos_many")
}

model Post {
  id              String     @id @default(cuid())
  title           String     @default("")
  summary         String     @default("")
  featureImage    Image?     @relation("Post_featureImage", fields: [featureImageId], references: [id])
  featureImageId  String?    @map("featureImage")
  metaTitle       String     @default("")
  metaDescription String     @default("")
  metaImage       Image?     @relation("Post_metaImage", fields: [metaImageId], references: [id])
  metaImageId     String?    @map("metaImage")
  content         String     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author          User?      @relation("Post_author", fields: [authorId], references: [id])
  authorId        String?    @map("author")
  category        Category[] @relation("Category_posts_Post_category")
  status          String?

  @@index([featureImageId])
  @@index([metaImageId])
  @@index([authorId])
}

model Page {
  id              String  @id @default(cuid())
  title           String  @default("")
  featureImage    Image?  @relation("Page_featureImage", fields: [featureImageId], references: [id])
  featureImageId  String? @map("featureImage")
  metaTitle       String  @default("")
  metaDescription String  @default("")
  metaImage       Image?  @relation("Page_metaImage", fields: [metaImageId], references: [id])
  metaImageId     String? @map("metaImage")
  content         String  @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author          User?   @relation("Page_author", fields: [authorId], references: [id])
  authorId        String? @map("author")
  status          String?

  @@index([featureImageId])
  @@index([metaImageId])
  @@index([authorId])
}

model Product {
  id                           String          @id @default(cuid())
  name                         String          @default("")
  status                       String?
  price                        Float
  stock                        Int?
  discount                     Float?
  description                  String          @default("")
  featureImage                 Image?          @relation("Product_featureImage", fields: [featureImageId], references: [id])
  featureImageId               String?         @map("featureImage")
  category                     Category[]      @relation("Category_products_Product_category")
  shippingZones                ShippingZone[]  @relation("Product_shippingZones_ShippingZone_products")
  metaDescription              String          @default("")
  metaImage                    Image?          @relation("Product_metaImage", fields: [metaImageId], references: [id])
  metaImageId                  String?         @map("metaImage")
  metaTitle                    String          @default("")
  variants                     ProductVariant? @relation("Product_variants", fields: [variantsId], references: [id])
  variantsId                   String?         @unique @map("variants")
  relatedProducts              Product[]       @relation("Product_relatedProducts_many")
  canonicalCategory            Category?       @relation("Product_canonicalCategory", fields: [canonicalCategoryId], references: [id])
  canonicalCategoryId          String?         @map("canonicalCategory")
  type                         String?
  reviews                      Review[]        @relation("Review_product")
  from_Product_relatedProducts Product[]       @relation("Product_relatedProducts_many")
  from_ProductBundle_products  ProductBundle[] @relation("ProductBundle_products_many")

  @@index([featureImageId])
  @@index([metaImageId])
  @@index([canonicalCategoryId])
}

model ProductBundle {
  id              String     @id @default(cuid())
  price           Float?
  status          String?
  name            String     @default("")
  description     String     @default("")
  featureImage    Image?     @relation("ProductBundle_featureImage", fields: [featureImageId], references: [id])
  featureImageId  String?    @map("featureImage")
  category        Category[] @relation("Category_bundles_ProductBundle_category")
  metaDescription String     @default("")
  metaImage       Image?     @relation("ProductBundle_metaImage", fields: [metaImageId], references: [id])
  metaImageId     String?    @map("metaImage")
  metaTitle       String     @default("")
  sku             String     @default("")
  products        Product[]  @relation("ProductBundle_products_many")

  @@index([featureImageId])
  @@index([metaImageId])
}

model ProductVariant {
  id                           String     @id @default(cuid())
  name                         String     @default("")
  description                  String     @default("")
  photos                       Image[]    @relation("ProductVariant_photos_many")
  stock                        Int?
  product                      Product?   @relation("Product_variants")
  length                       String     @default("")
  width                        String     @default("")
  depth                        String     @default("")
  weight                       String     @default("")
  downloadLink                 String     @default("")
  from_CartItem_productVariant CartItem[] @relation("CartItem_productVariant")
}

model Review {
  id         String   @id @default(cuid())
  title      String   @default("")
  rating     String?
  content    String   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  reviewer   User?    @relation("Review_reviewer", fields: [reviewerId], references: [id])
  reviewerId String?  @map("reviewer")
  product    Product? @relation("Review_product", fields: [productId], references: [id])
  productId  String?  @map("product")

  @@index([reviewerId])
  @@index([productId])
}

model CartItem {
  id               String          @id @default(cuid())
  quantity         Int?
  productVariant   ProductVariant? @relation("CartItem_productVariant", fields: [productVariantId], references: [id])
  productVariantId String?         @map("productVariant")
  customer         User?           @relation("CartItem_customer", fields: [customerId], references: [id])
  customerId       String?         @map("customer")
  price            Float?

  @@index([productVariantId])
  @@index([customerId])
}

model ShippingZone {
  id              String           @id @default(cuid())
  title           String           @default("")
  region          String?
  shippingMethods ShippingMethod[] @relation("ShippingMethod_shippingZones_ShippingZone_shippingMethods")
  products        Product[]        @relation("Product_shippingZones_ShippingZone_products")
}

model ShippingMethod {
  id            String         @id @default(cuid())
  title         String         @default("")
  enabled       Boolean        @default(false)
  shippingZones ShippingZone[] @relation("ShippingMethod_shippingZones_ShippingZone_shippingMethods")
  APIKey        String         @default("")
}